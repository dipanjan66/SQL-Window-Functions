-- Windows Function:===> OR - Analytic Function.

-- Some Windows Functions down below:==>

-- 1) ROW_NUMBER
-- 2) RANK
-- 3) DENSE_RANK
-- 4) LAG
-- 5) LEAD
-- 6) FIRST_VALUE
-- 7) LAST_VALUE
-- 8) Frame Clause
-- 9) NTH VALUE
-- 10) NTILE
-- 11) CUME_DIST
-- 12) PERCENT_RANK




-- Create "product" Table:-
--------------------------------------------

--Q. Find Maximum Salary from employee Table in each Department?

-- This is Using Normal Aggregate Function:-

select dept_id, max(salary) as max_salary
from employee
GROUP BY dept_id

--==================================================================

--==> Using Window Function:===>

--Q. Find Maximum Salary from employee Table?

-- over - is used to create window function


select e.*,
max(salary) over() as max_salary
from employee e

------------------------------------------------------

--Q. Find Maximum Salary from employee Table corresponding to each Department?

-- To get each Department - use - partition by - column name


select e.*,
max(salary) over(partition by dept_id) as max_salary
from employee e



--==================================================================

-- 1) ROW_NUMBER:======>  It will take the Unique Value

-- For every dept_id, it will arrange Row Number separately:-


select e.*,
row_number() over(partition by dept_id) as rn
from employee e

------------------------------------

-- Application of this row_number:-

-- Q. Fetch the First 2 Employee from each Department who joined the Company?


select * from(
	select e.*,
	row_number() over(partition by dept_id order by emp_id) as rn
	from employee e) as x   -- Subquery
where x.rn < 3;

--=======================================================================

-- 2) RANK

-- Q. Fetch the Top 3 Employee in each department earning the max salary?


select * from(
	select e.*,
	rank() over(partition by dept_id order by salary desc) as rnk
	from employee e) as x
where x.rnk < 4;

-- When it find duplicate value, it will skip the value for next position


--==========================================================================

-- 3) DENSE_RANK

-- It will not Skip any Value when it find any duplicate value


select * from(
	select e.*,
	dense_rank() over(partition by dept_id order by salary desc) as dense_rnk
	from employee e) as x
where x.dense_rnk < 4;



--=============================================================================


-- 4) LAG

-- Q. Fetch a Query to display if the Salary of an employee is higher, lower or equal to the previous employee?

select e.*,
lag(salary) over(partition by dept_id order by emp_id desc) as prev_emp_salary
from employee e

-- Value of salary that present in previous Record will get returned here


--==============================================================================

-- 5) LEAD



select e.*,
lead(salary) over(partition by dept_id order by emp_id desc) as next_emp_salary
from employee e

-- Value of salary that present in Next Record will get returned here

--==============================================================================================

-- Create product Table:-

CREATE TABLE product
( 
    product_category varchar(255),
    brand varchar(255),
    product_name varchar(255),
    price int
);




-- Insert value into product table:--

INSERT INTO product VALUES
('Phone', 'Apple', 'iPhone 12 Pro Max', 1300),
('Phone', 'Apple', 'iPhone 12 Pro', 1100),
('Phone', 'Apple', 'iPhone 12', 1000),
('Phone', 'Samsung', 'Galaxy Z Fold 3', 1800),
('Phone', 'Samsung', 'Galaxy Z Flip 3', 1000),
('Phone', 'Samsung', 'Galaxy Note 20', 1200),
('Phone', 'Samsung', 'Galaxy S21', 1000),
('Phone', 'OnePlus', 'OnePlus Nord', 300),
('Phone', 'OnePlus', 'OnePlus 9', 800),
('Phone', 'Google', 'Pixel 5', 600),
('Laptop', 'Apple', 'MacBook Pro 13', 2000),
('Laptop', 'Apple', 'MacBook Air', 1200),
('Laptop', 'Microsoft', 'Surface Laptop 4', 2100),
('Laptop', 'Dell', 'XPS 13', 2000),
('Laptop', 'Dell', 'XPS 15', 2300),
('Laptop', 'Dell', 'XPS 17', 2500),
('Earphone', 'Apple', 'AirPods Pro', 280),
('Earphone', 'Samsung', 'Galaxy Buds Pro', 220),
('Earphone', 'Samsung', 'Galaxy Buds Live', 170),
('Earphone', 'Sony', 'WF-1000XM4', 250),
('Headphone', 'Sony', 'WH-1000XM4', 400),
('Headphone', 'Apple', 'AirPods Max', 550),
('Headphone', 'Microsoft', 'Surface Headphones 2', 250),
('Smartwatch', 'Apple', 'Apple Watch Series 6', 1000),
('Smartwatch', 'Apple', 'Apple Watch SE', 400),
('Smartwatch', 'Samsung', 'Galaxy Watch 4', 600),
('Smartwatch', 'OnePlus', 'OnePlus Watch', 220);


--======================================================================================

-- 6) FIRST_VALUE

-- Q. Write a Query to display the most expensive product under each category (corresponding to each record)


select *,
first_value(product_name) over (partition by product_category order by price desc) as most_exp_product
from product

--=======================================================================================

-- 7) LAST_VALUE

-- Q. Write a Query to display the least product under each category (corresponding to each record)

select *,
last_value(product_name) over (partition by product_category order by price desc) as least_exp_product
from product

--=======================================================================================

-- 8) Frame Clause

-- Frame is subset of partition

-- Default Frame Clause:====>  range between unbounded preceding and current row


select *,
first_value(product_name) 
	over (partition by product_category order by price desc) 
	as most_exp_product,
last_value(product_name) 
	over (partition by product_category order by price desc
		 range between unbounded preceding and unbounded following)   -- Frame Clause
	as least_exp_product
from product

--======================================================================================

-- Alternate way to write Window Function:===> Best way to write Window Function


select *,
first_value(product_name) over w as most_exp_product,
last_value(product_name) over w as least_exp_product
from product
window w as (partition by product_category order by price desc
		 range between unbounded preceding and unbounded following)


--======================================================================================

-- 9) NTH VALUE

-- Q. Write a Query to display the Second most expensive product under each category?


select *,
first_value(product_name) over w as most_exp_product,
last_value(product_name) over w as least_exp_product,
nth_value(product_name, 2) over w as second_most_exp_product
from product
window w as (partition by product_category order by price desc
			range between unbounded preceding and unbounded following);



--======================================================================================

-- 10) NTILE

-- Q. Write a query to sagregate all the expensive phones, mid range phones and the cheaper phones?

-- NTILE function accept one argument where the Number of Buckets you want to create.

-- Here is 3 Bucket:- expensive phones, mid range phones and the cheaper phones



select product_name,
case when x.buckets = 1 then 'Expensive Phones'
		when x.buckets = 2 then 'Mid Range Phones'
		when x.buckets = 3 then 'Cheaper Phones' END phone_category
from (
	select *,
	ntile(3) over(order by price desc) as buckets
	from product
	where product_category = 'Phone') x


	
--================================================================================================

-- 11) CUME_DIST:- Cumulative Distribution

-- It always provide value within the Range of 0 and 1

-- Formula:-  Current Row Number / Total Number of Rows

-- Q. Query to fetch all product which are constituting the first 30% of the Data in products Table based on price

-- CUME_DIST - it does not accept any argument


select product_name, (cume_dist_percentage||'%') as cume_dist_percentage
from(
	select *,
	cume_dist() over(order by price desc) as cume_distribution,
	round(cume_dist() over(order by price desc)::numeric * 100, 2) as cume_dist_percentage
	from product) x
where x.cume_dist_percentage <= 30;


--===========================================================================

-- 12) PERCENT_RANK:-  (Relative rank of the Row / Percentage Ranking)

-- it does not accept any argument

-- It always provide value within the Range of 0 and 1

-- Formula:==> Current Row number - 1 / Total Number of Row - 1

-- Q. Query to identify how many percentage more expensive is "Galaxy Z Fold 3" when compare to all product




select product_name, per_rank
from(
	select *,
	percent_rank() over(order by price) as percentage_rank,
	round(percent_rank() over(order by price)::numeric * 100, 2) as per_rank
	from product) x
where x.product_name = 'Galaxy Z Fold 3';


-- So Galaxy Z Fold 3  - is 80.77 more expensive than other products








